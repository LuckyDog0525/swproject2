#include <Servo.h>

#define PIN_LED    9
#define PIN_IR     A0
#define PIN_SERVO  10

#define _DIST_MIN 100.0
#define _DIST_MAX 250.0
#define EMA_ALPHA 0.7

#define _DUTY_MIN 200
#define _DUTY_MAX 2300
#define DIST_NEU ((_DUTY_MIN + _DUTY_MAX) / 2) 
#define INTERVAL 25

Servo myservo;
unsigned long last_sampling_time;
float dist_prev = _DIST_MAX;
float dist_ema;

void setup() {
  pinMode(PIN_LED, OUTPUT);
  pinMode(PIN_IR, INPUT);

  myservo.attach(PIN_SERVO);
  myservo.writeMicroseconds(DIST_NEU);

  Serial.begin(57600);
}

void loop() {
  unsigned long time_curr = millis();

  if (time_curr < last_sampling_time + INTERVAL) return;
  last_sampling_time += INTERVAL;

  float a_value = analogRead(PIN_IR);
  float dist_raw = ((6762.0 / (a_value - 9.0)) - 4.0) * 10.0;

  if (dist_raw > _DIST_MAX || dist_raw < _DIST_MIN) {
    dist_raw = dist_prev;
    digitalWrite(PIN_LED, LOW);
  } else {
    digitalWrite(PIN_LED, HIGH);
  }

  dist_ema = dist_raw * EMA_ALPHA + dist_prev * (1 - EMA_ALPHA);
  dist_prev = dist_ema;

  int duty = _DUTY_MIN + (int)((dist_ema - _DIST_MIN) * (_DUTY_MAX - _DUTY_MIN) / (_DIST_MAX - _DIST_MIN));

  myservo.writeMicroseconds(duty);

  Serial.print("_DUTY_MIN:");   Serial.print(_DUTY_MIN);
  Serial.print(", _DUTY_MAX:"); Serial.print(_DUTY_MAX);
  Serial.print(", DIST_NEU:");  Serial.print(DIST_NEU);
  Serial.print(", _DIST_MIN:"); Serial.print(_DIST_MIN);
  Serial.print(", _DIST_MAX:"); Serial.print(_DIST_MAX);
  Serial.print(", IR:");        Serial.print(a_value);
  Serial.print(", dist_raw:");  Serial.print(dist_raw);
  Serial.print(", ema:");       Serial.print(dist_ema);
  Serial.print(", servo:");     Serial.print(duty);
  Serial.print(", duty:");      Serial.print(duty);
  Serial.println("");
}
